1) FIRST CREATED THE UI FOR THE APP

2) THEN WE CREATED THE MODELS AND ENTITIES FOR CONNECTING TO FIREBASE
MODELS ARE THE CLASSES THAT WE WILL USE IN OUR APP
ENTITIES ARE THE CLASSES THAT WE WILL USE FOR CONVERTING OUR MODELS CLASSES SO THAT WE CAN INTERACT WITH FIREBASE

IN MODELS
    WE HAVE TOENTITY AND FROMENTITY METHOD TO CONVERT THE CATEGORY OBJECT TO CATEGORY ENTITY

IN ENTITIES
    we have todocument and fromdocument to convert the data into map so that firebase can store
    and to convert the map data to category to be used in our app

3) then we connected our flutter project with firebase
first create a project then configure for flutter
then install the firebase cli and log in
then we use firebase login to login
then we use this command npm install -g firebase-tools to install firebase tools
then we run dart pub global activate flutterfire_cli
now we run flutterfire configure in our root project folder

after this we select the project from firebase we want to work on
then we select for which platforms we need it

4) after this we add firebase.initializeapp to our main.dart and bloc initializer to our dart
we also create a SimpleBlocObserver class that will display messages on the bloc lifecycle for our debugging purpose

5) enabled multidex support by adding multidexenable=true in build.gradle file
These error conditions display a common number: 65536. This number represents the total number of references that can be invoked by the code within a single Dalvik Executable (DEX) bytecode file.
Android app (APK) files contain executable bytecode files in the form of Dalvik Executable (DEX) files, which contain the compiled code used to run your app.
The Dalvik Executable specification limits the total number of methods that can be referenced within a single DEX file to 65,536â€”including Android framework methods, library methods, and methods in your own code.

6) so now we have create the createCategory blocs in that we take createCategory class from create_category_event.dart for creating the category
now we try creating the category by using the future function in expense_repo.dart and at various times we generate the different states
and in the ui we call context.read to read the createcategorybloc

7) Today (11 march 2024):-
a) create the circular loading when create category called
b) created a separate file called category_creation.dart for the create category dialog box
c) added a MultiBlocProvider widget in home_Screen.dart for creating getCategoryBloc

d) now we first created a getcategoryevent class and created a getcategories class that extends getcategoryevent
we create the getCategoryState class and in the success state we added a list of categories because thats what we want to retrieve
after that we create a getCategoryBloc that responds to GetCategories event. We retrieve the list from expenseRepository and then we pass that list to success state class

e) we changed the color type from string to int so that it can be easily accessible

f) as soon as we create a category it is not visible so to do that
- we make our getCategoryCreation to return Future
- in add_expense we make store the future in a variable
- we move Category variable higher in the code
- we add all the set category codes in setState
- and we pop category variable from our category_creation.dart
- in add_expense we move the BLOCBUILDER higher up to cover our whole body so as data is added changes are triggered and remove the earlier blocbuilder below
- now we add the category variable to our list of categories in add_expense.dart

g)So as i was opening my keyboard i was getting an overflow of 81 pixels in the column
so i wrapped the whole Column and padding below BlocBuilder with SingleChildScrollView


h) create the expense class models and entities
also created future methods in expense_repo.dart
used expense object in add_expense.dart to accept data
made changes in category text form field such as prefix icon and suffix icon
made changes in the save button onTap

i) created the bloc,event and state.dart files for create expense and added the bloc in home screen

f) added another blocListener at the top most level in add_expense.dart with values CreateExpenseBloc
also set the expenseId in the init() method


8) (12march 2024)
a) create the getExpense() method in firebase_expense_repo.dart and expense_repo.dart

b) created the bloc,event and state files for get expenses in home blocs section

c) added a blocProvider called getExpenseBloc in app_view.dart for our home screen because the original code for moving to home_Screen is there
similarly in add_expense the code to move to this screen was in the home_scren.dart so thats why we wrap at the highest level

d) in the main_screen dart added a parameter for the class called List of expenses and made the list view builder dynamic

e) so as soon as we add an expense we want it to display it on the screen
- so what we do is we pop expense object also from add_expense.dart
- in the home_screen.dart we store the expense object in a variable called newExpense
- we add the newExpense to expenses list


9) (13MARCH 24)
a) changed the rupees textformfield to accept only digits in flutter

b) added a variable totalAmount for the total Expense

c) create a sharedPreference for storing the totalAmount. Created two method saveTotalAmount() that saves the data in a key value pair and loadTotalAmount to display it


